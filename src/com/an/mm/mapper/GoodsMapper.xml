<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="MM.GoodsMapper">
	<cache eviction="LRU" type="com.an.core.mybatis.cache.RedisCache"/>
	<resultMap id="BaseResultMap" type="com.an.mm.entity.Goods">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="code" property="code" jdbcType="VARCHAR" />
		<result column="barcode" property="barcode" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="title" property="title" jdbcType="VARCHAR" />
		<result column="tips" property="tips" jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="CHAR" />
		<result column="weight" property="weight" jdbcType="NUMERIC" />
		<result column="shelf_life" property="shelfLife" jdbcType="INTEGER" />
		<result column="storage_type" property="storageType" jdbcType="CHAR" />
		<result column="uom_id" property="uomId" jdbcType="INTEGER" />
		<result column="brand_id" property="brandId" jdbcType="INTEGER" />
		<result column="producer" property="producer" jdbcType="VARCHAR" />
		<result column="cost_price" property="costPrice" jdbcType="NUMERIC" />
		<result column="sale_price" property="salePrice" jdbcType="NUMERIC" />
		<result column="market_price" property="marketPrice" jdbcType="NUMERIC" />
		<result column="category_id" property="categoryId" jdbcType="INTEGER" />
		<result column="category_code" property="categoryCode" jdbcType="VARCHAR" />
		<result column="sort" property="sort" jdbcType="INTEGER" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="max_limit" property="maxLimit" jdbcType="INTEGER" />
		<result column="sold_volume" property="soldVolume" jdbcType="INTEGER" />
		<result column="cmt_point" property="cmtPoint" jdbcType="FLOAT" />
		<result column="image" property="image" jdbcType="VARCHAR" />
		<result column="images" property="images" typeHandler="com.an.core.mybatis.handlers.JsonTypeHandler" />
		<result column="description" property="description" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="VARCHAR" />
		<result column="enter_by" property="enterBy" jdbcType="INTEGER" />
		<result column="enter_at" property="enterAt" jdbcType="TIMESTAMP" />

		<result column="region_id" property="regionId" jdbcType="INTEGER" />
		<result column="region_code" property="regionCode" jdbcType="VARCHAR" />
		<result column="stock_sum" property="stockSum" jdbcType="INTEGER" />
		<result column="stock_locked" property="stockLocked" jdbcType="INTEGER" />
		<result column="safe_line" property="safeLine" jdbcType="INTEGER" />
	</resultMap>

	<sql id="Example_Where_Clause">
		<where>
			<if test="status != null and status != ''">
				status = #{status}
			</if>
			<if test="status == null">
				status != 'd'
			</if>
			<if test="_SH != null and _SH !=''">
				and (code like concat('%', #{_SH}, '%') or name like concat('%', #{_SH}, '%'))
			</if>
			<if test="code != null and code !=''">
				and code like concat('%', #{code}, '%')
			</if>
			<if test="barcode != null and barcode !=''">
				and barcode like concat('%', #{barcode}, '%')
			</if>
			<if test="name != null and name !=''">
				and name like concat('%', #{name}, '%')
			</if>
			<if test="categoryId != null and categoryId > 0">
				and category_id = #{categoryId}
			</if>
			
			<if test="categoryCode != null and categoryCode !=''">
				and category_code like concat(#{categoryCode}, '%')
			</if>
			<if test="brandId != null and brandId > 0">
				and brand_id = #{brandId}
			</if>
		</where>
	</sql>

	<sql id="Base_Column_List">
		id, code, barcode, name, title, tips,
		type, weight, shelf_life, storage_type, uom_id,
		brand_id, producer, cost_price, sale_price, market_price,
		category_id, category_code, sort, remark, max_limit, sold_volume,
		cmt_point, image, status, enter_by, enter_at
	</sql>
	
	<sql id="Base_Column_Detail">
		id, code, barcode, name, title, tips,
		type, weight, shelf_life, storage_type, uom_id,
		brand_id, producer, cost_price, sale_price, market_price,
		category_id, category_code, sort, remark, max_limit, sold_volume,
		cmt_point, image, images, description, status, enter_by, enter_at
	</sql>

	<select id="selectByExample" resultMap="BaseResultMap" parameterType="map">
		select
		<include refid="Base_Column_List" />
		from MM_GOODS
		<include refid="Example_Where_Clause" />
		<if test="_BY != null">order by ${_BY}</if>
	</select>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="int">
		select
		<include refid="Base_Column_Detail" />
		from MM_GOODS
		where id = #{value,jdbcType=INTEGER}
	</select>

	<delete id="deleteByPrimaryKey" parameterType="int">
		update MM_GOODS
		set status = 'd', enter_by = #userId, enter_at = now()
		where id = #{value,jdbcType=INTEGER}
	</delete>

	<insert id="insert" parameterType="com.an.mm.entity.Goods">
		insert into MM_GOODS (code, barcode, name, title, tips,
			type, weight, shelf_life, storage_type, uom_id,
			brand_id, producer, cost_price, sale_price, market_price,
			category_id, category_code, sort, remark, max_limit, sold_volume,
			cmt_point, image, images, description, status, enter_by, enter_at)
		values (#{code,jdbcType=VARCHAR},
		#{barcode,jdbcType=VARCHAR},
		#{name,jdbcType=VARCHAR},
		#{title,jdbcType=VARCHAR},
		#{tips,jdbcType=VARCHAR},
		#{type,jdbcType=CHAR},
		#{weight,jdbcType=NUMERIC},
		#{shelfLife,jdbcType=INTEGER},
		#{storageType,jdbcType=CHAR},
		#{uomId,jdbcType=INTEGER},
		#{brandId,jdbcType=INTEGER},
		#{producer,jdbcType=VARCHAR},
		#{costPrice,jdbcType=NUMERIC},
		#{salePrice,jdbcType=NUMERIC},
		#{marketPrice,jdbcType=NUMERIC},
		#{categoryId,jdbcType=INTEGER},
		#{categoryCode,jdbcType=VARCHAR},
		#{sort,jdbcType=INTEGER},
		#{remark,jdbcType=VARCHAR},
		#{maxLimit,jdbcType=INTEGER},
		#{soldVolume,jdbcType=INTEGER},
		#{cmtPoint,jdbcType=NUMERIC},
		#{image,jdbcType=VARCHAR},
		#{images,typeHandler=com.an.core.mybatis.handlers.JsonTypeHandler},
		#{description,jdbcType=VARCHAR},
		#{status,jdbcType=VARCHAR},
		#userId,
		now())
		<selectKey resultType="int" keyProperty="id">
			SELECT @@IDENTITY AS id
		</selectKey>
	</insert>

	<select id="countByExample" parameterType="map" resultType="int">
		select count(1) from MM_GOODS
		<include refid="Example_Where_Clause" />
	</select>

	<update id="updateByPrimaryKey" parameterType="com.an.mm.entity.Goods">
		update MM_GOODS
		set code = #{code,jdbcType=VARCHAR},
		barcode = #{barcode,jdbcType=VARCHAR},
		name = #{name,jdbcType=VARCHAR},
		title = #{title,jdbcType=VARCHAR},
		tips = #{tips,jdbcType=VARCHAR},
		type = #{type,jdbcType=CHAR},
		weight = #{weight,jdbcType=NUMERIC},
		shelf_life = #{shelfLife,jdbcType=INTEGER},
		storage_type = #{storageType,jdbcType=CHAR},
		uom_id = #{uomId,jdbcType=INTEGER},
		brand_id = #{brandId,jdbcType=INTEGER},
		producer = #{producer,jdbcType=VARCHAR},
		cost_price = #{costPrice,jdbcType=NUMERIC},
		sale_price = #{salePrice,jdbcType=NUMERIC},
		market_price = #{marketPrice,jdbcType=NUMERIC},
		category_id = #{categoryId,jdbcType=INTEGER},
		category_code = #{categoryCode,jdbcType=VARCHAR},
		sort = #{sort,jdbcType=INTEGER},
		remark = #{remark,jdbcType=VARCHAR},
		max_limit = #{maxLimit,jdbcType=INTEGER},
		sold_volume = #{soldVolume,jdbcType=INTEGER},
		cmt_point = #{cmtPoint,jdbcType=NUMERIC},
		image = #{image,jdbcType=VARCHAR},
		images = #{images,typeHandler=com.an.core.mybatis.handlers.JsonTypeHandler},
		description = #{description,jdbcType=VARCHAR},
		status = #{status,jdbcType=VARCHAR},
		enter_by = #userId,
		enter_at = now()
		where id = #{id,jdbcType=INTEGER}
	</update>

	<select id="selectInventory" resultMap="BaseResultMap" parameterType="map">
		select g.id, g.code, g.barcode, g.name, g.type, g.cost_price,
		IFNULL(gr.sale_price, g.sale_price) sale_price,
		IFNULL(gr.sold_volume, g.sold_volume) sold_volume,
		IFNULL(gr.cmt_point, g.cmt_point) cmt_point,
		IFNULL(gr.max_limit, g.max_limit) max_limit,
		gr.region_id, gr.stock_sum, gr.stock_locked,
		gr.safe_line, gr.status, concat(g.id, '-', gr.region_id) as remark
		from MM_GOODS g, MM_GOODS_REGION gr
		where g.id = gr.goods_id and g.status != 'd'
		<if test="regionId != null and regionId > 0">
			and gr.region_id = #{regionId,jdbcType=INTEGER}
		</if>
		<if test="goodsId != null and goodsId > 0">
			and gr.goods_id = #{goodsId,jdbcType=INTEGER}
		</if>
		<if test="code != null and code !=''">
			and g.code like concat('%', #{code}, '%')
		</if>
		<if test="barcode != null and barcode !=''">
			and g.barcode like concat('%', #{barcode}, '%')
		</if>
		<if test="name != null and name !=''">
			and g.name like concat('%', #{name}, '%')
		</if>
	</select>

	<select id="countInventory" parameterType="map" resultType="int">
		select count(1) from MM_GOODS g, MM_GOODS_REGION gr
		where g.id = gr.goods_id and g.status != 'd'
		<if test="own">
			and gr.region_id = #regionId
		</if>
		<if test="low">
			and gr.stock_sum <![CDATA[<]]> gr.safe_line
		</if>
		<if test="regionId != null and regionId > 0">
			and gr.region_id = #{regionId,jdbcType=INTEGER}
		</if>
		<if test="goodsId != null and goodsId > 0">
			and gr.goods_id = #{goodsId,jdbcType=INTEGER}
		</if>
		<if test="code != null and code !=''">
			and g.code like concat('%', #{code}, '%')
		</if>
		<if test="barcode != null and barcode !=''">
			and g.barcode like concat('%', #{barcode}, '%')
		</if>
		<if test="name != null and name !=''">
			and g.name like concat('%', #{name}, '%')
		</if>
	</select>

	<insert id="insertOrUpdateInventory" parameterType="com.an.mm.entity.Goods">
		insert into MM_GOODS_REGION (goods_id, region_id, stock_sum, stock_locked, safe_line, 
		sale_price, max_limit, sold_volume, cmt_point, status, enter_by, enter_at) 
		values(#{id,jdbcType=INTEGER}, #{regionId,jdbcType=INTEGER},
		#{stockSum,jdbcType=INTEGER}, #{stockLocked,jdbcType=INTEGER},
		#{safeLine,jdbcType=INTEGER}, #{salePrice,jdbcType=NUMERIC},
		#{maxLimit,jdbcType=INTEGER}, #{soldVolume,jdbcType=INTEGER},
		#{cmtPoint,jdbcType=NUMERIC}, #{status,jdbcType=CHAR}, #userId, now())
		on duplicate key update 
		stock_sum = values(stock_sum), 
		stock_locked = values(stock_locked), 
		safe_line = values(safe_line), 
		sale_price = values(sale_price), 
		max_limit = values(max_limit), 
		sold_volume = values(sold_volume), 
		cmt_point = values(cmt_point), 
		status = values(status),
		enter_by = #userId,
		enter_at = now()		
	</insert>
	
	<!-- 查询在code 集合里面的id 列表 -->
	<select id="selectGoodsIdList" resultMap="BaseResultMap" parameterType="java.util.List">
	   select id,code from mm_goods where  code in 
		<foreach collection="list" item="item" index="index" separator="," open="(" close=")" >  
           #{item.code}  
        </foreach>  
	</select>
	
	<!-- 查询在regioncode 对应的regionid 列表 -->
	<select id="selectRegionIdList" resultMap="BaseResultMap" parameterType="java.util.List">
	   select id as region_id,code as region_code from sys_region where  code in 
		<foreach collection="list" item="item" index="index" separator="," open="(" close=")" >  
           #{item.regionCode}  
        </foreach>  
	</select>
	
	
	<!-- 批量导入库存 -->
	<insert id="batchInsertOrUpdateInventory" parameterType="java.util.List"> 
	   insert into mm_goods_region
	   (goods_id,region_id,stock_sum,stock_locked,enter_by,enter_at) values  
	    <foreach collection="list" item="item" index="index" separator="," >  
	        (#{item.id},#{item.regionId},#{item.stockSum},0,#userId, now())  
	    </foreach>  
	        on duplicate key update 
			stock_sum = values(stock_sum), 
			stock_locked = values(stock_locked), 
			enter_by = values(enter_by),
			enter_at = values(enter_at)	
	</insert>  

</mapper>